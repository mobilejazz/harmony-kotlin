/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

project.plugins.apply('maven-publish')
project.plugins.apply('signing')

ext {
  VERSION_NAME = '5.0'
  GROUP = 'com.mobilejazz'

  POM_NAME = 'Harmony Kotlin'
  POM_DESCRIPTION = 'Harmony is a framework developed by Mobile Jazz that specifies best practices, software architectural patterns and other software ' +
    'development related guidelines.'
  POM_URL = 'https://harmony.mobilejazz.com/'
  POM_SCM_URL = 'https://github.com/mobilejazz/harmony-kotlin.git'
  POM_SCM_CONNECTION = 'scm:git@github.com:mobilejazz/harmony-kotlin.git'
  POM_SCM_DEV_CONNECTION = 'scm:git@github.com:mobilejazz/harmony-kotlin.git'
  POM_LICENCE_NAME = 'Apache License'
  POM_LICENCE_URL = 'https://github.com/mobilejazz/harmony-kotlin/blob/master/LICENSE.txt'
  POM_LICENCE_DIST = 'repo'
  POM_DEVELOPER_ID = 'mobilejazz'
  POM_DEVELOPER_NAME = 'Mobile Jazz'
}

version = VERSION_NAME
group = GROUP

def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
    : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
    : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
  return hasProperty('HARMONY_NEXUS_USERNAME') ? HARMONY_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('HARMONY_NEXUS_PASSWORD') ? HARMONY_NEXUS_PASSWORD : ""
}

def configurePom(pom) {
  pom.name = POM_NAME
  pom.description = POM_DESCRIPTION
  pom.url = POM_URL

  pom.scm {
    url = POM_SCM_URL
    connection = POM_SCM_CONNECTION
    developerConnection = POM_SCM_DEV_CONNECTION
  }

  pom.licenses {
    license {
      name = POM_LICENCE_NAME
      url = POM_LICENCE_URL
      distribution = POM_LICENCE_DIST
    }
  }

  pom.developers {
    developer {
      id = POM_DEVELOPER_ID
      name = POM_DEVELOPER_NAME
    }
  }
}

def getGpgKey() {
  return hasProperty('SIGNING_KEY') ? SIGNING_KEY : ""
}

def getGpgPassphrase() {
  return hasProperty('PASSPHRASE') ? PASSPHRASE : ""
}

afterEvaluate { project ->
  publishing {
    repositories {
      maven {
        def releasesRepoUrl = getReleaseRepositoryUrl()
        def snapshotsRepoUrl = getSnapshotRepositoryUrl()
        url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl

        credentials(PasswordCredentials) {
          username = getRepositoryUsername()
          password = getRepositoryPassword()
        }
      }
    }
  }

  // TODO include real documentation
  task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
  }

  publishing.publications.all { publication ->
    publication.groupId = GROUP
    publication.version = VERSION_NAME

    artifact(javadocJar) // TODO include real documentation

    configurePom(publication.pom)
  }

  signing {
    required { isReleaseBuild() }
    def gpgKey = getGpgKey()
    def gpgPassphrase = getGpgPassphrase()
    if (!gpgKey.isEmpty() && !gpgPassphrase.isEmpty()) {
      useInMemoryPgpKeys(gpgKey, gpgPassphrase)
    }
    sign(publishing.publications)
  }
}

